{"cells":[{"cell_type":"markdown","metadata":{"id":"llx0I8S9ix-2"},"source":["# **Libraries and Dependencies**"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":15895,"status":"ok","timestamp":1664084199829,"user":{"displayName":"Nageswar SAI GANGADHAR","userId":"06054914930704312109"},"user_tz":-330},"id":"FZU2tjpvjPL6","outputId":"92741cad-3d7a-47ca-a04c-f61e07054d54"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting pyDOE\n","  Downloading pyDOE-0.3.8.zip (22 kB)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from pyDOE) (1.21.6)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from pyDOE) (1.7.3)\n","Building wheels for collected packages: pyDOE\n","  Building wheel for pyDOE (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for pyDOE: filename=pyDOE-0.3.8-py3-none-any.whl size=18184 sha256=5d90c6ed6f7f36c97c646ca58a22a24f5b041a8d6b13b4d962cf8bf42c4d1858\n","  Stored in directory: /root/.cache/pip/wheels/83/ce/8a/87b25c685bfeca1872d13b8dc101e087a9c6e3fb5ebb47022a\n","Successfully built pyDOE\n","Installing collected packages: pyDOE\n","Successfully installed pyDOE-0.3.8\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting plotting\n","  Downloading plotting-0.0.7-py3-none-any.whl (13 kB)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from plotting) (3.2.2)\n","Requirement already satisfied: seaborn in /usr/local/lib/python3.7/dist-packages (from plotting) (0.11.2)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (from plotting) (1.3.5)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->plotting) (2.8.2)\n","Requirement already satisfied: numpy>=1.11 in /usr/local/lib/python3.7/dist-packages (from matplotlib->plotting) (1.21.6)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->plotting) (3.0.9)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib->plotting) (0.11.0)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->plotting) (1.4.4)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from kiwisolver>=1.0.1->matplotlib->plotting) (4.1.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.1->matplotlib->plotting) (1.15.0)\n","Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas->plotting) (2022.2.1)\n","Requirement already satisfied: scipy>=1.0 in /usr/local/lib/python3.7/dist-packages (from seaborn->plotting) (1.7.3)\n","Installing collected packages: plotting\n","Successfully installed plotting-0.0.7\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting pygad\n","  Downloading pygad-2.18.1-py3-none-any.whl (56 kB)\n","\u001b[K     |████████████████████████████████| 56 kB 2.1 MB/s \n","\u001b[?25hRequirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from pygad) (1.21.6)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from pygad) (3.2.2)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->pygad) (2.8.2)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->pygad) (1.4.4)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->pygad) (3.0.9)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib->pygad) (0.11.0)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from kiwisolver>=1.0.1->matplotlib->pygad) (4.1.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.1->matplotlib->pygad) (1.15.0)\n","Installing collected packages: pygad\n","Successfully installed pygad-2.18.1\n"]}],"source":["! pip install pyDOE #Latin Hypercube Sampling\n","! pip install plotting\n","! pip install pygad"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":334},"executionInfo":{"elapsed":4723,"status":"error","timestamp":1664084204547,"user":{"displayName":"Nageswar SAI GANGADHAR","userId":"06054914930704312109"},"user_tz":-330},"id":"ps3AZqnu9XBo","outputId":"29a80f61-da8b-47a1-ff84-e0e6a5259755"},"outputs":[{"output_type":"error","ename":"MessageError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mMessageError\u001b[0m                              Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-d5df0069828e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mgoogle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolab\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdrive\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdrive\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/google/colab/drive.py\u001b[0m in \u001b[0;36mmount\u001b[0;34m(mountpoint, force_remount, timeout_ms)\u001b[0m\n\u001b[1;32m    103\u001b[0m       \u001b[0mforce_remount\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mforce_remount\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    104\u001b[0m       \u001b[0mtimeout_ms\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout_ms\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 105\u001b[0;31m       ephemeral=True)\n\u001b[0m\u001b[1;32m    106\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    107\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/google/colab/drive.py\u001b[0m in \u001b[0;36m_mount\u001b[0;34m(mountpoint, force_remount, timeout_ms, ephemeral)\u001b[0m\n\u001b[1;32m    118\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mephemeral\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    119\u001b[0m     _message.blocking_request(\n\u001b[0;32m--> 120\u001b[0;31m         'request_auth', request={'authType': 'dfs_ephemeral'}, timeout_sec=None)\n\u001b[0m\u001b[1;32m    121\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    122\u001b[0m   \u001b[0mmountpoint\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_os\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexpanduser\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmountpoint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/google/colab/_message.py\u001b[0m in \u001b[0;36mblocking_request\u001b[0;34m(request_type, request, timeout_sec, parent)\u001b[0m\n\u001b[1;32m    169\u001b[0m   request_id = send_request(\n\u001b[1;32m    170\u001b[0m       request_type, request, parent=parent, expect_reply=True)\n\u001b[0;32m--> 171\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0mread_reply_from_input\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrequest_id\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout_sec\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/google/colab/_message.py\u001b[0m in \u001b[0;36mread_reply_from_input\u001b[0;34m(message_id, timeout_sec)\u001b[0m\n\u001b[1;32m    100\u001b[0m         reply.get('colab_msg_id') == message_id):\n\u001b[1;32m    101\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0;34m'error'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mreply\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 102\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mMessageError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreply\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'error'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    103\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0mreply\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'data'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    104\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mMessageError\u001b[0m: Error: credential propagation was unsuccessful"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":9,"status":"aborted","timestamp":1664084204548,"user":{"displayName":"Nageswar SAI GANGADHAR","userId":"06054914930704312109"},"user_tz":-330},"id":"wh0mH9W9h6W7"},"outputs":[],"source":["import sys\n","sys.path.insert(0, '../Utilities/')\n","\n","import torch\n","from collections import OrderedDict\n","\n","from pyDOE import lhs\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import scipy.io\n","from scipy.interpolate import griddata\n","# from plotting import newfig, savefig\n","from mpl_toolkits.axes_grid1 import make_axes_locatable\n","import matplotlib.gridspec as gridspec\n","import time\n","\n","np.random.seed(1234)"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":9,"status":"aborted","timestamp":1664084204548,"user":{"displayName":"Nageswar SAI GANGADHAR","userId":"06054914930704312109"},"user_tz":-330},"id":"mLg6_gcWiQM_"},"outputs":[],"source":["# CUDA support \n","if torch.cuda.is_available():\n","    device = torch.device('cuda')\n","else:\n","    device = torch.device('cpu')"]},{"cell_type":"markdown","metadata":{"id":"I597Le6yi4F5"},"source":["# **Physics-informed Neural Networks**"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":9,"status":"aborted","timestamp":1664084204549,"user":{"displayName":"Nageswar SAI GANGADHAR","userId":"06054914930704312109"},"user_tz":-330},"id":"rg2zU76XiRBB"},"outputs":[],"source":["# the deep neural network\n","class DNN(torch.nn.Module):\n","    def __init__(self, layers):\n","        super(DNN, self).__init__()\n","        \n","        # parameters\n","        self.depth = len(layers) - 1\n","        \n","        # set up layer order dict\n","        self.activation = torch.nn.Tanh\n","        \n","        layer_list = list()\n","        for i in range(self.depth - 1): \n","            layer = torch.nn.Linear(layers[i], layers[i+1])\n","            torch.nn.init.xavier_normal_(layer.weight.data, gain=1.0)\n","            torch.nn.init.zeros_(layer.bias.data)\n","\n","            layer_list.append(\n","                ('layer_%d' % i, layer)\n","            )\n","            layer_list.append(('activation_%d' % i, self.activation()))\n","            # layer_list.append(('dropout_%d'%i, torch.nn.Dropout(0.005)))\n","\n","            # layer_list.append(('normalisation_%d' % i, torch.nn.BatchNorm1d(layers[i+1])))\n","            # layer_list.append(('normalisation_%d' % i, torch.nn.layerNorm(layers[i+1])))\n","\n","        layer_list.append(\n","            ('layer_%d' % (self.depth - 1), torch.nn.Linear(layers[-2], layers[-1]))\n","        )\n","        layerDict = OrderedDict(layer_list)\n","        \n","        # deploy layers\n","        self.layers = torch.nn.Sequential(layerDict)\n","        \n","    def forward(self, x):\n","        out = self.layers(x)\n","        return out\n"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":9,"status":"aborted","timestamp":1664084204549,"user":{"displayName":"Nageswar SAI GANGADHAR","userId":"06054914930704312109"},"user_tz":-330},"id":"-dVFg-gciRTs"},"outputs":[],"source":["# the physics-guided neural network\n","class PhysicsInformedNN():\n","    def __init__(self, X_u, u, X_f, layers, lb, ub, nu, X_star):\n","        \n","        # boundary conditions\n","        self.lb = torch.tensor(lb).float().to(device)\n","        self.ub = torch.tensor(ub).float().to(device)\n","        \n","        # data\n","        self.x_u = torch.tensor(X_u[:, 0:1], requires_grad=True).float().to(device)\n","        self.t_u = torch.tensor(X_u[:, 1:2], requires_grad=True).float().to(device)\n","        self.x_f = torch.tensor(X_f[:, 0:1], requires_grad=True).float().to(device)\n","        self.t_f = torch.tensor(X_f[:, 1:2], requires_grad=True).float().to(device)\n","        self.u = torch.tensor(u).float().to(device)\n","        \n","        self.layers = layers\n","        self.nu = nu\n","        \n","        # deep neural networks\n","        self.dnn = DNN(layers).to(device)\n","        \n","        # optimizers: using the same settings\n","        self.optimizer = torch.optim.LBFGS(\n","            self.dnn.parameters(), \n","            lr=1.0, \n","            max_iter=10000, \n","            max_eval=10000, \n","            history_size=50,\n","            tolerance_grad=1e-5, \n","            tolerance_change=1.0 * np.finfo(float).eps,\n","            line_search_fn=\"strong_wolfe\"       # can be \"strong_wolfe\"\n","        )\n","\n","        self.iter = 0\n","        \n","    def net_u(self, x, t):  \n","        u = self.dnn(torch.cat([x, t], dim=1))\n","        return u\n","    \n","    def net_f(self, x, t):\n","        \"\"\" The pytorch autograd version of calculating residual \"\"\"\n","        u = self.net_u(x, t)\n","        \n","        u_t = torch.autograd.grad(\n","            u, t, \n","            grad_outputs=torch.ones_like(u),\n","            retain_graph=True,\n","            create_graph=True\n","        )[0]\n","        u_x = torch.autograd.grad(\n","            u, x, \n","            grad_outputs=torch.ones_like(u),\n","            retain_graph=True,\n","            create_graph=True\n","        )[0]\n","        u_xx = torch.autograd.grad(\n","            u_x, x, \n","            grad_outputs=torch.ones_like(u_x),\n","            retain_graph=True,\n","            create_graph=True\n","        )[0]\n","        \n","        f = u_t + u * u_x - self.nu * u_xx\n","        return f\n","\n","    def l1_loss(self):\n","        l1_loss = torch.nn.L1Loss(size_average=False)\n","        reg_loss=0\n","        for param in self.dnn.parameters():\n","            reg_loss+=l1_loss(param)\n","\n","        return reg_loss\n","            \n","    def loss_func(self):\n","        global error_list\n","        \n","        self.optimizer.zero_grad()\n","        \n","        u_pred = self.net_u(self.x_u, self.t_u)\n","        f_pred = self.net_f(self.x_f, self.t_f)\n","        loss_u = torch.mean((self.u - u_pred) ** 2)\n","        loss_f = torch.mean(f_pred ** 2)\n","        \n","        loss = loss_u + loss_f\n","        \n","        loss.backward()\n","        self.iter += 1\n","        # if self.iter % 100 == 0:\n","        print(\n","            'Iter %d, Loss: %.5e, Loss_u: %.5e, Loss_f: %.5e' % (self.iter, loss.item(), loss_u.item(), loss_f.item())\n","        )\n","        \n","        # print('Error u: %e' % (error_u))\n","        return loss\n","    \n","    def fitness_func(self, solution, sol_idx):\n","        predictions = pygad.torchga.predict(model=self.dnn, solution=solution, data=data_inputs)\n","        \n","\n","    \n","    def train(self):\n","        self.dnn.train()\n","                \n","        # Backward and optimize\n","        self.optimizer.step(self.loss_func)\n","\n","            \n","    def predict(self, X):\n","        x = torch.tensor(X[:, 0:1], requires_grad=True).float().to(device)\n","        t = torch.tensor(X[:, 1:2], requires_grad=True).float().to(device)\n","\n","        self.dnn.eval()\n","        u = self.net_u(x, t)\n","        f = self.net_f(x, t)\n","        u = u.detach().cpu().numpy()\n","        f = f.detach().cpu().numpy()\n","        return u, f"]},{"cell_type":"markdown","metadata":{"id":"8wkb6umMi8h_"},"source":["# **Configurations**"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":9,"status":"aborted","timestamp":1664084204549,"user":{"displayName":"Nageswar SAI GANGADHAR","userId":"06054914930704312109"},"user_tz":-330},"id":"hCbkmjYliRZW"},"outputs":[],"source":["nu = 0.01/np.pi\n","noise = 0.0        \n","\n","error_list = []\n","\n","N_u = 100\n","N_f = 10000\n","n_neurs = 20\n","layers = [2, n_neurs, n_neurs, n_neurs, n_neurs, n_neurs, n_neurs, n_neurs, n_neurs, 1]\n","\n","data = scipy.io.loadmat('/content/drive/MyDrive/SEM - 7/BTP/data/burgers_shock.mat')\n","\n","t = data['t'].flatten()[:,None]\n","x = data['x'].flatten()[:,None]\n","Exact = np.real(data['usol']).T\n","\n","X, T = np.meshgrid(x,t)\n","\n","X_star = np.hstack((X.flatten()[:,None], T.flatten()[:,None]))\n","u_star = Exact.flatten()[:,None]              \n","\n","# Doman bounds\n","lb = X_star.min(0)\n","ub = X_star.max(0)\n","mu = X_star.mean()\n","var = X_star.var()    \n","\n","xx1 = np.hstack((X[0:1,:].T, T[0:1,:].T))\n","uu1 = Exact[0:1,:].T\n","xx2 = np.hstack((X[:,0:1], T[:,0:1]))\n","uu2 = Exact[:,0:1]\n","xx3 = np.hstack((X[:,-1:], T[:,-1:]))\n","uu3 = Exact[:,-1:]\n","\n","X_u_train = np.vstack([xx1, xx2, xx3])\n","\n","X_f_train = lb + (ub-lb)*lhs(2, N_f)\n","# X_f_train = (lhs(2, N_f) - mu) / var\n","\n","X_f_train = np.vstack((X_f_train, X_u_train))\n","u_train = np.vstack([uu1, uu2, uu3])\n","\n","idx = np.random.choice(X_u_train.shape[0], N_u, replace=False)\n","X_u_train = X_u_train[idx, :]\n","u_train = u_train[idx,:]\n","\n","#u_pred, f_pred = model.predict(X_star)\n","\n","#error_u = np.linalg.norm(u_star-u_pred,2)/np.linalg.norm(u_star,2)\n","#print('Error u: %e' % (error_u))                     \n","\n","#U_pred = griddata(X_star, u_pred.flatten(), (X, T), method='cubic')\n","#Error = np.abs(Exact - U_pred)"]},{"cell_type":"markdown","metadata":{"id":"c1fi_ecfjB0m"},"source":["# **Training**"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":9,"status":"aborted","timestamp":1664084204549,"user":{"displayName":"Nageswar SAI GANGADHAR","userId":"06054914930704312109"},"user_tz":-330},"id":"L_hnkbjQiReL"},"outputs":[],"source":["model = PhysicsInformedNN(X_u_train, u_train, X_f_train, layers, lb, ub, nu, X_star)"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":9,"status":"aborted","timestamp":1664084204550,"user":{"displayName":"Nageswar SAI GANGADHAR","userId":"06054914930704312109"},"user_tz":-330},"id":"r3E8I_xEiRid"},"outputs":[],"source":["%%time\n","\n","model.train()"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":8,"status":"aborted","timestamp":1664084204550,"user":{"displayName":"Nageswar SAI GANGADHAR","userId":"06054914930704312109"},"user_tz":-330},"id":"FMZoVK7SiRmZ"},"outputs":[],"source":["u_pred, f_pred = model.predict(X_star)\n","\n","error_u = np.linalg.norm(u_star-u_pred,2)/np.linalg.norm(u_star,2)\n","print('Error u: %e' % (error_u))                     \n","\n","U_pred = griddata(X_star, u_pred.flatten(), (X, T), method='cubic')\n","Error = np.abs(Exact - U_pred)"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":8,"status":"aborted","timestamp":1664084204550,"user":{"displayName":"Nageswar SAI GANGADHAR","userId":"06054914930704312109"},"user_tz":-330},"id":"dVUSWFvMiRqN"},"outputs":[],"source":["\"\"\" The aesthetic setting has changed. \"\"\"\n","\n","####### Row 0: u(t,x) ##################    \n","\n","fig = plt.figure(figsize=(9, 5))\n","ax = fig.add_subplot(111)\n","\n","h = ax.imshow(U_pred.T, interpolation='nearest', cmap='rainbow', \n","              extent=[t.min(), t.max(), x.min(), x.max()], \n","              origin='lower', aspect='auto')\n","divider = make_axes_locatable(ax)\n","cax = divider.append_axes(\"right\", size=\"5%\", pad=0.10)\n","cbar = fig.colorbar(h, cax=cax)\n","cbar.ax.tick_params(labelsize=15) \n","\n","ax.plot(\n","    X_u_train[:,1], \n","    X_u_train[:,0], \n","    'kx', label = 'Data (%d points)' % (u_train.shape[0]), \n","    markersize = 4,  # marker size doubled\n","    clip_on = False,\n","    alpha=1.0\n",")\n","\n","line = np.linspace(x.min(), x.max(), 2)[:,None]\n","ax.plot(t[25]*np.ones((2,1)), line, 'w-', linewidth = 1)\n","ax.plot(t[50]*np.ones((2,1)), line, 'w-', linewidth = 1)\n","ax.plot(t[75]*np.ones((2,1)), line, 'w-', linewidth = 1)\n","\n","ax.set_xlabel('$t$', size=20)\n","ax.set_ylabel('$x$', size=20)\n","ax.legend(\n","    loc='upper center', \n","    bbox_to_anchor=(0.9, -0.05), \n","    ncol=5, \n","    frameon=False, \n","    prop={'size': 15}\n",")\n","ax.set_title('$u(t,x)$', fontsize = 20) # font size doubled\n","ax.tick_params(labelsize=15)\n","\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"jbhD5EASjH0x"},"source":["# **Visualizations**"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":9,"status":"aborted","timestamp":1664084204551,"user":{"displayName":"Nageswar SAI GANGADHAR","userId":"06054914930704312109"},"user_tz":-330},"id":"lKWSK9wYiRtl"},"outputs":[],"source":["####### Row 1: u(t,x) slices ################## \n","\n","\"\"\" The aesthetic setting has changed. \"\"\"\n","\n","fig = plt.figure(figsize=(14, 10))\n","ax = fig.add_subplot(111)\n","\n","gs1 = gridspec.GridSpec(1, 3)\n","gs1.update(top=1-1.0/3.0-0.1, bottom=1.0-2.0/3.0, left=0.1, right=0.9, wspace=0.5)\n","\n","ax = plt.subplot(gs1[0, 0])\n","ax.plot(x,Exact[25,:], 'b-', linewidth = 2, label = 'Exact')       \n","ax.plot(x,U_pred[25,:], 'r--', linewidth = 2, label = 'Prediction')\n","ax.set_xlabel('$x$')\n","ax.set_ylabel('$u(t,x)$')    \n","ax.set_title('$t = 0.25$', fontsize = 15)\n","ax.axis('square')\n","ax.set_xlim([-1.1,1.1])\n","ax.set_ylim([-1.1,1.1])\n","\n","for item in ([ax.title, ax.xaxis.label, ax.yaxis.label] +\n","             ax.get_xticklabels() + ax.get_yticklabels()):\n","    item.set_fontsize(15)\n","\n","ax = plt.subplot(gs1[0, 1])\n","ax.plot(x,Exact[50,:], 'b-', linewidth = 2, label = 'Exact')       \n","ax.plot(x,U_pred[50,:], 'r--', linewidth = 2, label = 'Prediction')\n","ax.set_xlabel('$x$')\n","ax.set_ylabel('$u(t,x)$')\n","ax.axis('square')\n","ax.set_xlim([-1.1,1.1])\n","ax.set_ylim([-1.1,1.1])\n","ax.set_title('$t = 0.50$', fontsize = 15)\n","ax.legend(\n","    loc='upper center', \n","    bbox_to_anchor=(0.5, -0.15), \n","    ncol=5, \n","    frameon=False, \n","    prop={'size': 15}\n",")\n","\n","for item in ([ax.title, ax.xaxis.label, ax.yaxis.label] +\n","             ax.get_xticklabels() + ax.get_yticklabels()):\n","    item.set_fontsize(15)\n","\n","ax = plt.subplot(gs1[0, 2])\n","ax.plot(x,Exact[75,:], 'b-', linewidth = 2, label = 'Exact')       \n","ax.plot(x,U_pred[75,:], 'r--', linewidth = 2, label = 'Prediction')\n","ax.set_xlabel('$x$')\n","ax.set_ylabel('$u(t,x)$')\n","ax.axis('square')\n","ax.set_xlim([-1.1,1.1])\n","ax.set_ylim([-1.1,1.1])    \n","ax.set_title('$t = 0.75$', fontsize = 15)\n","\n","for item in ([ax.title, ax.xaxis.label, ax.yaxis.label] +\n","             ax.get_xticklabels() + ax.get_yticklabels()):\n","    item.set_fontsize(15)\n","\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":9,"status":"aborted","timestamp":1664084204551,"user":{"displayName":"Nageswar SAI GANGADHAR","userId":"06054914930704312109"},"user_tz":-330},"id":"PkRy6dQc-Gyk"},"outputs":[],"source":["import matplotlib\n","\n","x_axis = [i for i in range(1,len(error_list)+1)]\n","\n","plt.plot(x_axis, error_list)\n","plt.title(\"test error\")"]}],"metadata":{"accelerator":"GPU","colab":{"provenance":[]},"gpuClass":"standard","kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}