{"cells":[{"cell_type":"markdown","metadata":{"id":"llx0I8S9ix-2"},"source":["# **Libraries and Dependencies**"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11498,"status":"ok","timestamp":1663584313158,"user":{"displayName":"Nageswar Venkata Sai Gangadhar","userId":"02855835275532238793"},"user_tz":-330},"id":"FZU2tjpvjPL6","outputId":"d25e85a4-291a-43bd-cb38-2d51c35ea7ce"},"outputs":[{"name":"stdout","output_type":"stream","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting pyDOE\n","  Downloading pyDOE-0.3.8.zip (22 kB)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from pyDOE) (1.21.6)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from pyDOE) (1.7.3)\n","Building wheels for collected packages: pyDOE\n","  Building wheel for pyDOE (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for pyDOE: filename=pyDOE-0.3.8-py3-none-any.whl size=18184 sha256=62f17a6e2bf3fa525a234e672ab499e340285cfab562d9c41064b0a1800f83e4\n","  Stored in directory: /root/.cache/pip/wheels/83/ce/8a/87b25c685bfeca1872d13b8dc101e087a9c6e3fb5ebb47022a\n","Successfully built pyDOE\n","Installing collected packages: pyDOE\n","Successfully installed pyDOE-0.3.8\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting plotting\n","  Downloading plotting-0.0.7-py3-none-any.whl (13 kB)\n","Requirement already satisfied: seaborn in /usr/local/lib/python3.7/dist-packages (from plotting) (0.11.2)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from plotting) (3.2.2)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (from plotting) (1.3.5)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,\u003e=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib-\u003eplotting) (3.0.9)\n","Requirement already satisfied: python-dateutil\u003e=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib-\u003eplotting) (2.8.2)\n","Requirement already satisfied: kiwisolver\u003e=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib-\u003eplotting) (1.4.4)\n","Requirement already satisfied: cycler\u003e=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib-\u003eplotting) (0.11.0)\n","Requirement already satisfied: numpy\u003e=1.11 in /usr/local/lib/python3.7/dist-packages (from matplotlib-\u003eplotting) (1.21.6)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from kiwisolver\u003e=1.0.1-\u003ematplotlib-\u003eplotting) (4.1.1)\n","Requirement already satisfied: six\u003e=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil\u003e=2.1-\u003ematplotlib-\u003eplotting) (1.15.0)\n","Requirement already satisfied: pytz\u003e=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas-\u003eplotting) (2022.2.1)\n","Requirement already satisfied: scipy\u003e=1.0 in /usr/local/lib/python3.7/dist-packages (from seaborn-\u003eplotting) (1.7.3)\n","Installing collected packages: plotting\n","Successfully installed plotting-0.0.7\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting pygad\n","  Downloading pygad-2.18.0-py3-none-any.whl (56 kB)\n","\u001b[K     |████████████████████████████████| 56 kB 2.0 MB/s \n","\u001b[?25hRequirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from pygad) (3.2.2)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from pygad) (1.21.6)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,\u003e=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib-\u003epygad) (3.0.9)\n","Requirement already satisfied: kiwisolver\u003e=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib-\u003epygad) (1.4.4)\n","Requirement already satisfied: python-dateutil\u003e=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib-\u003epygad) (2.8.2)\n","Requirement already satisfied: cycler\u003e=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib-\u003epygad) (0.11.0)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from kiwisolver\u003e=1.0.1-\u003ematplotlib-\u003epygad) (4.1.1)\n","Requirement already satisfied: six\u003e=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil\u003e=2.1-\u003ematplotlib-\u003epygad) (1.15.0)\n","Installing collected packages: pygad\n","Successfully installed pygad-2.18.0\n"]}],"source":["! pip install pyDOE #Latin Hypercube Sampling\n","! pip install plotting\n","! pip install pygad"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1137155,"status":"ok","timestamp":1663585450310,"user":{"displayName":"Nageswar Venkata Sai Gangadhar","userId":"02855835275532238793"},"user_tz":-330},"id":"ps3AZqnu9XBo","outputId":"11014613-c27c-43d7-9b9f-df46f93217f7"},"outputs":[{"name":"stdout","output_type":"stream","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":3,"metadata":{"executionInfo":{"elapsed":1324,"status":"ok","timestamp":1663585451625,"user":{"displayName":"Nageswar Venkata Sai Gangadhar","userId":"02855835275532238793"},"user_tz":-330},"id":"wh0mH9W9h6W7"},"outputs":[],"source":["import sys\n","sys.path.insert(0, '../Utilities/')\n","\n","import torch\n","from collections import OrderedDict\n","\n","from pyDOE import lhs\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import scipy.io\n","from scipy.interpolate import griddata\n","# from plotting import newfig, savefig\n","from mpl_toolkits.axes_grid1 import make_axes_locatable\n","import matplotlib.gridspec as gridspec\n","import time\n","\n","np.random.seed(1234)"]},{"cell_type":"code","execution_count":4,"metadata":{"executionInfo":{"elapsed":9,"status":"ok","timestamp":1663585451626,"user":{"displayName":"Nageswar Venkata Sai Gangadhar","userId":"02855835275532238793"},"user_tz":-330},"id":"SLbom56pPESP"},"outputs":[],"source":["import torch\n","from pygad import torchga\n","import pygad"]},{"cell_type":"code","execution_count":5,"metadata":{"executionInfo":{"elapsed":8,"status":"ok","timestamp":1663585451626,"user":{"displayName":"Nageswar Venkata Sai Gangadhar","userId":"02855835275532238793"},"user_tz":-330},"id":"mLg6_gcWiQM_"},"outputs":[],"source":["# CUDA support \n","if torch.cuda.is_available():\n","    device = torch.device('cuda')\n","else:\n","    device = torch.device('cpu')"]},{"cell_type":"markdown","metadata":{"id":"I597Le6yi4F5"},"source":["# **Physics-informed Neural Networks**"]},{"cell_type":"code","execution_count":6,"metadata":{"executionInfo":{"elapsed":7,"status":"ok","timestamp":1663585451626,"user":{"displayName":"Nageswar Venkata Sai Gangadhar","userId":"02855835275532238793"},"user_tz":-330},"id":"rg2zU76XiRBB"},"outputs":[],"source":["# the deep neural network\n","class DNN(torch.nn.Module):\n","    def __init__(self, layers):\n","        super(DNN, self).__init__()\n","        \n","        # parameters\n","        self.depth = len(layers) - 1\n","        \n","        # set up layer order dict\n","        self.activation = torch.nn.Tanh\n","        \n","        layer_list = list()\n","        for i in range(self.depth - 1): \n","            layer = torch.nn.Linear(layers[i], layers[i+1])\n","            torch.nn.init.xavier_normal_(layer.weight.data, gain=1.0)\n","            torch.nn.init.zeros_(layer.bias.data)\n","\n","            layer_list.append(\n","                ('layer_%d' % i, layer)\n","            )\n","            layer_list.append(('activation_%d' % i, self.activation()))\n","            # layer_list.append(('dropout_%d'%i, torch.nn.Dropout(0.005)))\n","\n","            # layer_list.append(('normalisation_%d' % i, torch.nn.BatchNorm1d(layers[i+1])))\n","            # layer_list.append(('normalisation_%d' % i, torch.nn.layerNorm(layers[i+1])))\n","\n","        layer_list.append(\n","            ('layer_%d' % (self.depth - 1), torch.nn.Linear(layers[-2], layers[-1]))\n","        )\n","        layerDict = OrderedDict(layer_list)\n","        \n","        # deploy layers\n","        self.layers = torch.nn.Sequential(layerDict)\n","        \n","    def forward(self, x):\n","        out = self.layers(x)\n","        return out\n"]},{"cell_type":"code","execution_count":7,"metadata":{"executionInfo":{"elapsed":7,"status":"ok","timestamp":1663585451627,"user":{"displayName":"Nageswar Venkata Sai Gangadhar","userId":"02855835275532238793"},"user_tz":-330},"id":"-dVFg-gciRTs"},"outputs":[],"source":["# the physics-guided neural network\n","class PhysicsInformedNN():\n","    def __init__(self, X_u, u, X_f, layers, lb, ub, nu, X_star):\n","        \n","        # boundary conditions\n","        self.lb = torch.tensor(lb).float().to(device)\n","        self.ub = torch.tensor(ub).float().to(device)\n","        \n","        # data\n","        self.x_u = torch.tensor(X_u[:, 0:1], requires_grad=True).float().to(device)\n","        self.t_u = torch.tensor(X_u[:, 1:2], requires_grad=True).float().to(device)\n","        self.x_f = torch.tensor(X_f[:, 0:1], requires_grad=True).float().to(device)\n","        self.t_f = torch.tensor(X_f[:, 1:2], requires_grad=True).float().to(device)\n","        self.u = torch.tensor(u).float().to(device)\n","        \n","        self.layers = layers\n","        self.nu = nu\n","        \n","        # deep neural networks\n","        self.dnn = DNN(layers).to(device)\n","        self.torch_ga = torchga.TorchGA(model=self.dnn.layers, num_solutions=100)\n","\n","        self.iter = 0\n","    \n","        # genetic algo parameters\n","        self.num_generations = 3000\n","        self.num_mating = 50\n","        self.init_population = self.torch_ga.population_weights\n","\n","    def net_u(self, x, t):  \n","        u = self.dnn(torch.cat([x, t], dim=1))\n","        return u\n","    \n","    def net_f(self, x, t):\n","        \"\"\" The pytorch autograd version of calculating residual \"\"\"\n","        u = self.net_u(x, t)\n","        \n","        u_t = torch.autograd.grad(\n","            u, t, \n","            grad_outputs=torch.ones_like(u),\n","            retain_graph=True,\n","            create_graph=True\n","        )[0]\n","        u_x = torch.autograd.grad(\n","            u, x, \n","            grad_outputs=torch.ones_like(u),\n","            retain_graph=True,\n","            create_graph=True\n","        )[0]\n","        u_xx = torch.autograd.grad(\n","            u_x, x, \n","            grad_outputs=torch.ones_like(u_x),\n","            retain_graph=True,\n","            create_graph=True\n","        )[0]\n","        \n","        f = u_t + u * u_x - self.nu * u_xx\n","        return f\n","\n","    def train(self):\n","        \n","        def fitness_func(sol, sol_idx):\n","            weights_dict = torchga.model_weights_as_dict(model=self.dnn.layers, weights_vector=sol)\n","            self.dnn.layers.load_state_dict(weights_dict)\n","\n","            u_pred = self.net_u(self.x_u, self.t_u)\n","            f_pred = self.net_f(self.x_f, self.t_f)\n","\n","            loss_u = torch.mean((self.u - u_pred) ** 2)\n","            loss_f = torch.mean(f_pred ** 2)\n","            \n","            loss = loss_u + loss_f\n","            loss = loss.item()\n","\n","            return 1/(loss + 1e-5)\n","\n","        def callback_generation(ga_instance):\n","            print(\"Generation = {generation}\".format(generation=ga_instance.generations_completed))\n","            print(\"Fitness    = {fitness}\".format(fitness=ga_instance.best_solution()[1]))\n","\n","        ga_instance = pygad.GA(num_generations=self.num_generations, \n","                       num_parents_mating=self.num_mating, \n","                       initial_population=self.init_population,\n","                       fitness_func=fitness_func,\n","                       on_generation=callback_generation)\n","\n","        ga_instance.run()\n","            \n","    def predict(self, X):\n","        x = torch.tensor(X[:, 0:1], requires_grad=True).float().to(device)\n","        t = torch.tensor(X[:, 1:2], requires_grad=True).float().to(device)\n","\n","        self.dnn.eval()\n","        u = self.net_u(x, t)\n","        f = self.net_f(x, t)\n","        u = u.detach().cpu().numpy()\n","        f = f.detach().cpu().numpy()\n","        return u, f"]},{"cell_type":"markdown","metadata":{"id":"8wkb6umMi8h_"},"source":["# **Configurations**"]},{"cell_type":"code","execution_count":8,"metadata":{"executionInfo":{"elapsed":718,"status":"ok","timestamp":1663585452338,"user":{"displayName":"Nageswar Venkata Sai Gangadhar","userId":"02855835275532238793"},"user_tz":-330},"id":"hCbkmjYliRZW"},"outputs":[],"source":["nu = 0.01/np.pi\n","noise = 0.0        \n","\n","error_list = []\n","\n","N_u = 100\n","N_f = 10000\n","n_neurs = 20\n","layers = [2, n_neurs, n_neurs, n_neurs, n_neurs, n_neurs, n_neurs, n_neurs, n_neurs, 1]\n","\n","data = scipy.io.loadmat('/content/drive/MyDrive/PINN_Data/burgers_shock.mat')\n","\n","t = data['t'].flatten()[:,None]\n","x = data['x'].flatten()[:,None]\n","Exact = np.real(data['usol']).T\n","\n","X, T = np.meshgrid(x,t)\n","\n","X_star = np.hstack((X.flatten()[:,None], T.flatten()[:,None]))\n","u_star = Exact.flatten()[:,None]              \n","\n","# Doman bounds\n","lb = X_star.min(0)\n","ub = X_star.max(0)\n","mu = X_star.mean()\n","var = X_star.var()    \n","\n","xx1 = np.hstack((X[0:1,:].T, T[0:1,:].T))\n","uu1 = Exact[0:1,:].T\n","xx2 = np.hstack((X[:,0:1], T[:,0:1]))\n","uu2 = Exact[:,0:1]\n","xx3 = np.hstack((X[:,-1:], T[:,-1:]))\n","uu3 = Exact[:,-1:]\n","\n","X_u_train = np.vstack([xx1, xx2, xx3])\n","\n","X_f_train = lb + (ub-lb)*lhs(2, N_f)\n","# X_f_train = (lhs(2, N_f) - mu) / var\n","\n","X_f_train = np.vstack((X_f_train, X_u_train))\n","u_train = np.vstack([uu1, uu2, uu3])\n","\n","idx = np.random.choice(X_u_train.shape[0], N_u, replace=False)\n","X_u_train = X_u_train[idx, :]\n","u_train = u_train[idx,:]\n","\n","#u_pred, f_pred = model.predict(X_star)\n","\n","#error_u = np.linalg.norm(u_star-u_pred,2)/np.linalg.norm(u_star,2)\n","#print('Error u: %e' % (error_u))                     \n","\n","#U_pred = griddata(X_star, u_pred.flatten(), (X, T), method='cubic')\n","#Error = np.abs(Exact - U_pred)"]},{"cell_type":"markdown","metadata":{"id":"c1fi_ecfjB0m"},"source":["# **Training**"]},{"cell_type":"code","execution_count":9,"metadata":{"executionInfo":{"elapsed":3897,"status":"ok","timestamp":1663585456231,"user":{"displayName":"Nageswar Venkata Sai Gangadhar","userId":"02855835275532238793"},"user_tz":-330},"id":"L_hnkbjQiReL"},"outputs":[],"source":["model = PhysicsInformedNN(X_u_train, u_train, X_f_train, layers, lb, ub, nu, X_star)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"r3E8I_xEiRid"},"outputs":[{"name":"stdout","output_type":"stream","text":["Generation = 1\n","Fitness    = 3.138564165212104\n","Generation = 2\n","Fitness    = 3.138564165212104\n","Generation = 3\n","Fitness    = 3.138564165212104\n","Generation = 4\n","Fitness    = 3.138564165212104\n","Generation = 5\n","Fitness    = 3.138564165212104\n","Generation = 6\n","Fitness    = 3.138564165212104\n","Generation = 7\n","Fitness    = 3.138564165212104\n","Generation = 8\n","Fitness    = 3.138564165212104\n","Generation = 9\n","Fitness    = 3.138564165212104\n","Generation = 10\n","Fitness    = 3.138564165212104\n","Generation = 11\n","Fitness    = 3.138564165212104\n","Generation = 12\n","Fitness    = 3.138564165212104\n","Generation = 13\n","Fitness    = 3.138564165212104\n","Generation = 14\n","Fitness    = 3.138564165212104\n","Generation = 15\n","Fitness    = 3.138564165212104\n","Generation = 16\n","Fitness    = 3.138564165212104\n","Generation = 17\n","Fitness    = 3.138564165212104\n","Generation = 18\n","Fitness    = 3.138564165212104\n","Generation = 19\n","Fitness    = 3.138564165212104\n","Generation = 20\n","Fitness    = 3.138564165212104\n","Generation = 21\n","Fitness    = 3.138564165212104\n","Generation = 22\n","Fitness    = 3.211862493741668\n","Generation = 23\n","Fitness    = 3.505516996209003\n","Generation = 24\n","Fitness    = 3.138564165212104\n","Generation = 25\n","Fitness    = 3.138564165212104\n","Generation = 26\n","Fitness    = 3.138564165212104\n","Generation = 27\n","Fitness    = 3.138564165212104\n","Generation = 28\n","Fitness    = 3.138564165212104\n","Generation = 29\n","Fitness    = 3.138564165212104\n","Generation = 30\n","Fitness    = 3.138564165212104\n","Generation = 31\n","Fitness    = 3.138564165212104\n","Generation = 32\n","Fitness    = 3.138564165212104\n","Generation = 33\n","Fitness    = 3.138564165212104\n","Generation = 34\n","Fitness    = 3.138564165212104\n","Generation = 35\n","Fitness    = 3.138564165212104\n","Generation = 36\n","Fitness    = 3.138564165212104\n","Generation = 37\n","Fitness    = 3.7518625407128092\n","Generation = 38\n","Fitness    = 3.138564165212104\n","Generation = 39\n","Fitness    = 3.138564165212104\n","Generation = 40\n","Fitness    = 3.3055275704432874\n","Generation = 41\n","Fitness    = 3.138564165212104\n","Generation = 42\n","Fitness    = 3.138564165212104\n","Generation = 43\n","Fitness    = 3.138564165212104\n","Generation = 44\n","Fitness    = 3.138564165212104\n","Generation = 45\n","Fitness    = 3.138564165212104\n","Generation = 46\n","Fitness    = 3.138564165212104\n","Generation = 47\n","Fitness    = 3.5108636776088975\n","Generation = 48\n","Fitness    = 3.138564165212104\n","Generation = 49\n","Fitness    = 3.138564165212104\n","Generation = 50\n","Fitness    = 3.138564165212104\n","Generation = 51\n","Fitness    = 3.138564165212104\n","Generation = 52\n","Fitness    = 3.167335599791114\n","Generation = 53\n","Fitness    = 3.138564165212104\n","Generation = 54\n","Fitness    = 3.138564165212104\n","Generation = 55\n","Fitness    = 3.138564165212104\n","Generation = 56\n","Fitness    = 3.138564165212104\n","Generation = 57\n","Fitness    = 3.138564165212104\n","Generation = 58\n","Fitness    = 3.138564165212104\n","Generation = 59\n","Fitness    = 3.138564165212104\n","Generation = 60\n","Fitness    = 4.167115113466978\n","Generation = 61\n","Fitness    = 3.138564165212104\n","Generation = 62\n","Fitness    = 3.138564165212104\n","Generation = 63\n","Fitness    = 3.3851610056917836\n","Generation = 64\n","Fitness    = 3.138564165212104\n","Generation = 65\n","Fitness    = 3.138564165212104\n","Generation = 66\n","Fitness    = 3.138564165212104\n","Generation = 67\n","Fitness    = 3.359312273021981\n","Generation = 68\n","Fitness    = 3.138564165212104\n","Generation = 69\n","Fitness    = 3.138564165212104\n","Generation = 70\n","Fitness    = 3.138564165212104\n","Generation = 71\n","Fitness    = 3.138564165212104\n","Generation = 72\n","Fitness    = 3.206480521807402\n","Generation = 73\n","Fitness    = 3.4705170264490026\n","Generation = 74\n","Fitness    = 3.1735482529463725\n","Generation = 75\n","Fitness    = 3.7924200420072243\n","Generation = 76\n","Fitness    = 3.138564165212104\n","Generation = 77\n","Fitness    = 3.138564165212104\n","Generation = 78\n","Fitness    = 3.138564165212104\n","Generation = 79\n","Fitness    = 3.3245008918896826\n","Generation = 80\n","Fitness    = 4.309690276817619\n","Generation = 81\n","Fitness    = 3.138564165212104\n","Generation = 82\n","Fitness    = 3.138564165212104\n","Generation = 83\n","Fitness    = 3.138564165212104\n","Generation = 84\n","Fitness    = 3.138564165212104\n","Generation = 85\n","Fitness    = 3.138564165212104\n","Generation = 86\n","Fitness    = 3.3102060746236632\n","Generation = 87\n","Fitness    = 3.302440176386641\n","Generation = 88\n","Fitness    = 3.138564165212104\n","Generation = 89\n","Fitness    = 3.138564165212104\n","Generation = 90\n","Fitness    = 3.138564165212104\n","Generation = 91\n","Fitness    = 3.3121005408284088\n","Generation = 92\n","Fitness    = 3.138564165212104\n","Generation = 93\n","Fitness    = 3.914193297292471\n","Generation = 94\n","Fitness    = 3.243315132692428\n","Generation = 95\n","Fitness    = 3.138564165212104\n","Generation = 96\n","Fitness    = 3.138564165212104\n","Generation = 97\n","Fitness    = 3.138564165212104\n","Generation = 98\n","Fitness    = 3.138564165212104\n","Generation = 99\n","Fitness    = 3.138564165212104\n","Generation = 100\n","Fitness    = 3.138564165212104\n","Generation = 101\n","Fitness    = 3.458990307879838\n","Generation = 102\n","Fitness    = 3.1612669475717445\n","Generation = 103\n","Fitness    = 3.138564165212104\n","Generation = 104\n","Fitness    = 3.247724133037363\n","Generation = 105\n","Fitness    = 3.138564165212104\n","Generation = 106\n","Fitness    = 3.138564165212104\n","Generation = 107\n","Fitness    = 3.138564165212104\n","Generation = 108\n","Fitness    = 3.5200910428127177\n","Generation = 109\n","Fitness    = 3.138564165212104\n"]},{"ename":"KeyboardInterrupt","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m\u003ctimed eval\u003e\u001b[0m in \u001b[0;36m\u003cmodule\u003e\u001b[0;34m\u001b[0m\n","\u001b[0;32m\u003cipython-input-7-7b168da2ae66\u003e\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     85\u001b[0m                        on_generation=callback_generation)\n\u001b[1;32m     86\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 87\u001b[0;31m         \u001b[0mga_instance\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     88\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     89\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pygad/pygad.py\u001b[0m in \u001b[0;36mrun\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1412\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprevious_generation_fitness\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlast_generation_fitness\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1413\u001b[0m             \u001b[0;31m# Measuring the fitness of each chromosome in the population. Save the fitness in the last_generation_fitness attribute.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 1414\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlast_generation_fitness\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcal_pop_fitness\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1415\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1416\u001b[0m             \u001b[0mbest_solution\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbest_solution_fitness\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbest_match_idx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbest_solution\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpop_fitness\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlast_generation_fitness\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pygad/pygad.py\u001b[0m in \u001b[0;36mcal_pop_fitness\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1233\u001b[0m                     \u001b[0mfitness\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprevious_generation_fitness\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mparent_idx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1234\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 1235\u001b[0;31m                     \u001b[0mfitness\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfitness_func\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msol_idx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1236\u001b[0m                     \u001b[0;32mif\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfitness\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mGA\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msupported_int_float_types\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1237\u001b[0m                         \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m\u003cipython-input-7-7b168da2ae66\u003e\u001b[0m in \u001b[0;36mfitness_func\u001b[0;34m(sol, sol_idx)\u001b[0m\n\u001b[1;32m     65\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m             \u001b[0mu_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnet_u\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mx_u\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mt_u\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 67\u001b[0;31m             \u001b[0mf_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnet_f\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mx_f\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mt_f\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     68\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m             \u001b[0mloss_u\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mu\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mu_pred\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m**\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m\u003cipython-input-7-7b168da2ae66\u003e\u001b[0m in \u001b[0;36mnet_f\u001b[0;34m(self, x, t)\u001b[0m\n\u001b[1;32m     52\u001b[0m             \u001b[0mgrad_outputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mones_like\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mu_x\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m             \u001b[0mretain_graph\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 54\u001b[0;31m             \u001b[0mcreate_graph\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     55\u001b[0m         )[0]\n\u001b[1;32m     56\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/autograd/__init__.py\u001b[0m in \u001b[0;36mgrad\u001b[0;34m(outputs, inputs, grad_outputs, retain_graph, create_graph, only_inputs, allow_unused, is_grads_batched)\u001b[0m\n\u001b[1;32m    276\u001b[0m         return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n\u001b[1;32m    277\u001b[0m             \u001b[0mt_outputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrad_outputs_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mretain_graph\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcreate_graph\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mt_inputs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 278\u001b[0;31m             allow_unused, accumulate_grad=False)  # Calls into the C++ engine to run the backward pass\n\u001b[0m\u001b[1;32m    279\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    280\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["%%time\n","\n","model.train()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"FMZoVK7SiRmZ"},"outputs":[{"name":"stdout","output_type":"stream","text":["Error u: 1.566462e+00\n"]}],"source":["u_pred, f_pred = model.predict(X_star)\n","\n","error_u = np.linalg.norm(u_star-u_pred,2)/np.linalg.norm(u_star,2)\n","print('Error u: %e' % (error_u))                     \n","\n","U_pred = griddata(X_star, u_pred.flatten(), (X, T), method='cubic')\n","Error = np.abs(Exact - U_pred)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"dVUSWFvMiRqN"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 648x360 with 2 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["\"\"\" The aesthetic setting has changed. \"\"\"\n","\n","####### Row 0: u(t,x) ##################    \n","\n","fig = plt.figure(figsize=(9, 5))\n","ax = fig.add_subplot(111)\n","\n","h = ax.imshow(U_pred.T, interpolation='nearest', cmap='rainbow', \n","              extent=[t.min(), t.max(), x.min(), x.max()], \n","              origin='lower', aspect='auto')\n","divider = make_axes_locatable(ax)\n","cax = divider.append_axes(\"right\", size=\"5%\", pad=0.10)\n","cbar = fig.colorbar(h, cax=cax)\n","cbar.ax.tick_params(labelsize=15) \n","\n","ax.plot(\n","    X_u_train[:,1], \n","    X_u_train[:,0], \n","    'kx', label = 'Data (%d points)' % (u_train.shape[0]), \n","    markersize = 4,  # marker size doubled\n","    clip_on = False,\n","    alpha=1.0\n",")\n","\n","line = np.linspace(x.min(), x.max(), 2)[:,None]\n","ax.plot(t[25]*np.ones((2,1)), line, 'w-', linewidth = 1)\n","ax.plot(t[50]*np.ones((2,1)), line, 'w-', linewidth = 1)\n","ax.plot(t[75]*np.ones((2,1)), line, 'w-', linewidth = 1)\n","\n","ax.set_xlabel('$t$', size=20)\n","ax.set_ylabel('$x$', size=20)\n","ax.legend(\n","    loc='upper center', \n","    bbox_to_anchor=(0.9, -0.05), \n","    ncol=5, \n","    frameon=False, \n","    prop={'size': 15}\n",")\n","ax.set_title('$u(t,x)$', fontsize = 20) # font size doubled\n","ax.tick_params(labelsize=15)\n","\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"jbhD5EASjH0x"},"source":["# **Visualizations**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"lKWSK9wYiRtl"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 1008x720 with 3 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["####### Row 1: u(t,x) slices ################## \n","\n","\"\"\" The aesthetic setting has changed. \"\"\"\n","\n","fig = plt.figure(figsize=(14, 10))\n","ax = fig.add_subplot(111)\n","\n","gs1 = gridspec.GridSpec(1, 3)\n","gs1.update(top=1-1.0/3.0-0.1, bottom=1.0-2.0/3.0, left=0.1, right=0.9, wspace=0.5)\n","\n","ax = plt.subplot(gs1[0, 0])\n","ax.plot(x,Exact[25,:], 'b-', linewidth = 2, label = 'Exact')       \n","ax.plot(x,U_pred[25,:], 'r--', linewidth = 2, label = 'Prediction')\n","ax.set_xlabel('$x$')\n","ax.set_ylabel('$u(t,x)$')    \n","ax.set_title('$t = 0.25$', fontsize = 15)\n","ax.axis('square')\n","ax.set_xlim([-1.1,1.1])\n","ax.set_ylim([-1.1,1.1])\n","\n","for item in ([ax.title, ax.xaxis.label, ax.yaxis.label] +\n","             ax.get_xticklabels() + ax.get_yticklabels()):\n","    item.set_fontsize(15)\n","\n","ax = plt.subplot(gs1[0, 1])\n","ax.plot(x,Exact[50,:], 'b-', linewidth = 2, label = 'Exact')       \n","ax.plot(x,U_pred[50,:], 'r--', linewidth = 2, label = 'Prediction')\n","ax.set_xlabel('$x$')\n","ax.set_ylabel('$u(t,x)$')\n","ax.axis('square')\n","ax.set_xlim([-1.1,1.1])\n","ax.set_ylim([-1.1,1.1])\n","ax.set_title('$t = 0.50$', fontsize = 15)\n","ax.legend(\n","    loc='upper center', \n","    bbox_to_anchor=(0.5, -0.15), \n","    ncol=5, \n","    frameon=False, \n","    prop={'size': 15}\n",")\n","\n","for item in ([ax.title, ax.xaxis.label, ax.yaxis.label] +\n","             ax.get_xticklabels() + ax.get_yticklabels()):\n","    item.set_fontsize(15)\n","\n","ax = plt.subplot(gs1[0, 2])\n","ax.plot(x,Exact[75,:], 'b-', linewidth = 2, label = 'Exact')       \n","ax.plot(x,U_pred[75,:], 'r--', linewidth = 2, label = 'Prediction')\n","ax.set_xlabel('$x$')\n","ax.set_ylabel('$u(t,x)$')\n","ax.axis('square')\n","ax.set_xlim([-1.1,1.1])\n","ax.set_ylim([-1.1,1.1])    \n","ax.set_title('$t = 0.75$', fontsize = 15)\n","\n","for item in ([ax.title, ax.xaxis.label, ax.yaxis.label] +\n","             ax.get_xticklabels() + ax.get_yticklabels()):\n","    item.set_fontsize(15)\n","\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"PkRy6dQc-Gyk"},"outputs":[{"data":{"text/plain":["Text(0.5, 1.0, 'test error')"]},"execution_count":14,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"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\n","text/plain":["\u003cFigure size 432x288 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["import matplotlib\n","\n","x_axis = [i for i in range(1,len(error_list)+1)]\n","\n","plt.plot(x_axis, error_list)\n","plt.title(\"test error\")"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":[],"name":"","version":""},"gpuClass":"standard","kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}